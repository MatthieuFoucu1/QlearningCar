import numpy as np

class Track:
    @staticmethod
    def getEasy():
        track = np.array([[1, 1, 1, 1, 1, 1, 1],
                          [1, 2, 0, 0, 1, 0, 1],
                          [1, 0, 1, 0, 1, 0, 1],
                          [1, 0, 1, 0, 0, 0, 1],
                          [1, 0, 0, 0, 1, -1, 1],
                          [1, 1, 1, 1, 1, 1, 1]])
        return track
    
    @staticmethod
    def getMedium():
        track = np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1],
                          [1, 2, 0, 0, 1, 0, 0, 0, 1],
                          [1, 0, 1, 0, 1, 1, 1, 0, 1],
                          [1, 0, 1, 0, 1, 0, 0, 0, 1],
                          [1, 0, 0, 0, 0, 0, 1, 0, 1],
                          [1, 0, 1, 0, 1, 0, 1, -1, 1],
                          [1, 0, 1, 0, 0, 0, 0, 0, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1]])
        return track
    @staticmethod
    def getHard():
        track = np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                          [1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 1],
                          [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1],
                          [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1],
                          [1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])
        return track
    @staticmethod
    def getExpert():
        # need to make it train on a bigger set with more rewrad
        # episodes 10000
        # reward 1000
        # learnign rate .8 
        track = np.array([
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
                    [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
                    [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
                    [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1],
                    [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1],
                    [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1],
                    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                    [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
                    [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
                    [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1],
                    [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],
                    [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
                    [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1],
                    [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
                    [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])
        return track

    @staticmethod
    def getCustom():
        # You can add a custom track here
        # use the custom mazedrawpy
        # or upload image
        return None